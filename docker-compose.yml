version: '3.8'

services:
  # Backend API service
  medivote-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medivote-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://medivote:medivote@postgres:5432/medivote
      - REDIS_URL=redis://redis:6379
      - BLOCKCHAIN_RPC_URL=http://ganache:8545
      - DEBUG=True
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    depends_on:
      - postgres
      - redis
      - ganache
    volumes:
      - ./backend:/app
      - ./circuits:/app/circuits
      - ./keys:/app/keys
      - backend-uploads:/app/uploads
    networks:
      - medivote-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend web application
  medivote-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: medivote-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_BLOCKCHAIN_NETWORK=testnet
      - REACT_APP_ENABLE_ACCESSIBILITY=true
    depends_on:
      - medivote-backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - medivote-network
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: medivote-postgres
    environment:
      - POSTGRES_DB=medivote
      - POSTGRES_USER=medivote
      - POSTGRES_PASSWORD=medivote
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - medivote-network
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: medivote-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - medivote-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Ganache blockchain for development
  ganache:
    image: trufflesuite/ganache:latest
    container_name: medivote-ganache
    ports:
      - "8545:8545"
    command: >
      --host 0.0.0.0
      --port 8545
      --networkId 1337
      --accounts 10
      --defaultBalanceEther 100
      --gasLimit 10000000
      --gasPrice 20000000000
      --deterministic
    networks:
      - medivote-network
    restart: unless-stopped

  # IPFS for decentralized storage (optional)
  ipfs:
    image: ipfs/go-ipfs:latest
    container_name: medivote-ipfs
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs-data:/data/ipfs
    networks:
      - medivote-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: medivote-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./frontend/build:/usr/share/nginx/html
    depends_on:
      - medivote-backend
      - medivote-frontend
    networks:
      - medivote-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: medivote-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - medivote-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: medivote-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - medivote-network
    restart: unless-stopped

  # Circuit compiler service for ZK proofs
  circom-compiler:
    build:
      context: ./circuits
      dockerfile: Dockerfile
    container_name: medivote-circom
    volumes:
      - ./circuits:/workspace
      - circuit-artifacts:/workspace/build
    networks:
      - medivote-network
    restart: "no"

volumes:
  postgres-data:
  redis-data:
  ipfs-data:
  prometheus-data:
  grafana-data:
  backend-uploads:
  circuit-artifacts:

networks:
  medivote-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 